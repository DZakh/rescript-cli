// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Process = require("process");

function program(definer) {
  var commands = {};
  var commandStrings = [];
  definer({
        register: (function (string, tag) {
            if (commands[string] !== (void 0)) {
              Js_exn.raiseError("Command \"" + string + "\" is already registered.");
            }
            commandStrings.push(string);
            var tmp = string === "" ? [] : string.split(" ");
            commands[string] = {
              string: string,
              parts: tmp,
              tag: tag
            };
          })
      });
  return {
          commands: commands,
          commandStrings: commandStrings
        };
}

function parse(program, maybeArgs) {
  var args = maybeArgs !== undefined ? maybeArgs : Process.argv.slice(2);
  var argsString = args.join(" ");
  var matchingCommandRef;
  for(var idx = 0 ,idx_finish = program.commandStrings.length; idx < idx_finish; ++idx){
    var commandString = program.commandStrings[idx];
    var command = program.commands[commandString];
    if (argsString === command.string || argsString.startsWith(command.string + " ")) {
      var matchingCommand = matchingCommandRef;
      if (!(matchingCommand !== undefined && matchingCommand.string.length > command.string.length)) {
        matchingCommandRef = command;
      }
      
    }
    
  }
  var matchingCommand$1 = matchingCommandRef;
  if (matchingCommand$1 !== undefined) {
    return {
            TAG: "Ok",
            _0: [
              matchingCommand$1,
              args.slice(matchingCommand$1.parts.length)
            ]
          };
  } else {
    return {
            TAG: "Error",
            _0: undefined
          };
  }
}

exports.program = program;
exports.parse = parse;
/* process Not a pure module */
